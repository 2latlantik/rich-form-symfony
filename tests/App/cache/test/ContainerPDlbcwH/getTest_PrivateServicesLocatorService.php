<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'test.private_services_locator' shared service.

return $this->services['test.private_services_locator'] = new \Symfony\Component\DependencyInjection\ServiceLocator(array('controller_name_converter' => function () {
    return ($this->privates['controller_name_converter'] ?? $this->privates['controller_name_converter'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser(($this->services['kernel'] ?? $this->get('kernel'))));
}, 'argument_metadata_factory' => function () {
    return ($this->privates['argument_metadata_factory'] ?? $this->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory());
}, 'response_listener' => function () {
    return ($this->privates['response_listener'] ?? $this->privates['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8'));
}, 'streamed_response_listener' => function () {
    return ($this->privates['streamed_response_listener'] ?? $this->privates['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener());
}, 'locale_listener' => function () {
    return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
}, 'validate_request_listener' => function () {
    return ($this->privates['validate_request_listener'] ?? $this->privates['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener());
}, 'resolve_controller_name_subscriber' => function () {
    return ($this->privates['resolve_controller_name_subscriber'] ?? $this->getResolveControllerNameSubscriberService());
}, 'console.error_listener' => function () {
    return ($this->privates['console.error_listener'] ?? $this->load('getConsole_ErrorListenerService.php'));
}, 'console.command.about' => function () {
    return ($this->privates['console.command.about'] ?? $this->load('getConsole_Command_AboutService.php'));
}, 'console.command.assets_install' => function () {
    return ($this->privates['console.command.assets_install'] ?? $this->load('getConsole_Command_AssetsInstallService.php'));
}, 'console.command.cache_clear' => function () {
    return ($this->privates['console.command.cache_clear'] ?? $this->load('getConsole_Command_CacheClearService.php'));
}, 'console.command.cache_pool_clear' => function () {
    return ($this->privates['console.command.cache_pool_clear'] ?? $this->load('getConsole_Command_CachePoolClearService.php'));
}, 'console.command.cache_pool_prune' => function () {
    return ($this->privates['console.command.cache_pool_prune'] ?? $this->load('getConsole_Command_CachePoolPruneService.php'));
}, 'console.command.cache_pool_delete' => function () {
    return ($this->privates['console.command.cache_pool_delete'] ?? $this->load('getConsole_Command_CachePoolDeleteService.php'));
}, 'console.command.cache_warmup' => function () {
    return ($this->privates['console.command.cache_warmup'] ?? $this->load('getConsole_Command_CacheWarmupService.php'));
}, 'console.command.config_debug' => function () {
    return ($this->privates['console.command.config_debug'] ?? $this->load('getConsole_Command_ConfigDebugService.php'));
}, 'console.command.config_dump_reference' => function () {
    return ($this->privates['console.command.config_dump_reference'] ?? $this->load('getConsole_Command_ConfigDumpReferenceService.php'));
}, 'console.command.container_debug' => function () {
    return ($this->privates['console.command.container_debug'] ?? $this->load('getConsole_Command_ContainerDebugService.php'));
}, 'console.command.debug_autowiring' => function () {
    return ($this->privates['console.command.debug_autowiring'] ?? $this->load('getConsole_Command_DebugAutowiringService.php'));
}, 'console.command.event_dispatcher_debug' => function () {
    return ($this->privates['console.command.event_dispatcher_debug'] ?? $this->load('getConsole_Command_EventDispatcherDebugService.php'));
}, 'console.command.xliff_lint' => function () {
    return ($this->privates['console.command.xliff_lint'] ?? $this->load('getConsole_Command_XliffLintService.php'));
}, 'console.command.yaml_lint' => function () {
    return ($this->privates['console.command.yaml_lint'] ?? $this->load('getConsole_Command_YamlLintService.php'));
}, 'console.command.form_debug' => function () {
    return ($this->privates['console.command.form_debug'] ?? $this->load('getConsole_Command_FormDebugService.php'));
}, 'cache.validator' => function () {
    return ($this->privates['cache.validator'] ?? $this->load('getCache_ValidatorService.php'));
}, 'cache.annotations' => function () {
    return ($this->privates['cache.annotations'] ?? $this->load('getCache_AnnotationsService.php'));
}, 'cache.default_clearer' => function () {
    return ($this->services['cache.app_clearer'] ?? $this->load('getCache_AppClearerService.php'));
}, 'translator.selector' => function () {
    return ($this->privates['translator.selector'] ?? $this->privates['translator.selector'] = new \Symfony\Component\Translation\MessageSelector());
}, 'test.client.history' => function () {
    return new \Symfony\Component\BrowserKit\History();
}, 'test.client.cookiejar' => function () {
    return new \Symfony\Component\BrowserKit\CookieJar();
}, 'test.session.listener' => function () {
    return ($this->privates['test.session.listener'] ?? $this->getTest_Session_ListenerService());
}, 'form.resolved_type_factory' => function () {
    return ($this->privates['form.resolved_type_factory'] ?? $this->privates['form.resolved_type_factory'] = new \Symfony\Component\Form\ResolvedFormTypeFactory());
}, 'form.registry' => function () {
    return ($this->privates['form.registry'] ?? $this->load('getForm_RegistryService.php'));
}, 'form.extension' => function () {
    return ($this->privates['form.extension'] ?? $this->load('getForm_ExtensionService.php'));
}, 'form.type_guesser.validator' => function () {
    return ($this->privates['form.type_guesser.validator'] ?? $this->load('getForm_TypeGuesser_ValidatorService.php'));
}, 'form.choice_list_factory.default' => function () {
    return ($this->privates['form.choice_list_factory.default'] ?? $this->privates['form.choice_list_factory.default'] = new \Symfony\Component\Form\ChoiceList\Factory\DefaultChoiceListFactory());
}, 'form.choice_list_factory.property_access' => function () {
    return ($this->privates['form.choice_list_factory.property_access'] ?? $this->load('getForm_ChoiceListFactory_PropertyAccessService.php'));
}, 'form.choice_list_factory.cached' => function () {
    return ($this->privates['form.choice_list_factory.cached'] ?? $this->load('getForm_ChoiceListFactory_CachedService.php'));
}, 'form.type.form' => function () {
    return ($this->privates['form.type.form'] ?? $this->load('getForm_Type_FormService.php'));
}, 'form.type.choice' => function () {
    return ($this->privates['form.type.choice'] ?? $this->load('getForm_Type_ChoiceService.php'));
}, 'form.type_extension.form.http_foundation' => function () {
    return ($this->privates['form.type_extension.form.http_foundation'] ?? $this->load('getForm_TypeExtension_Form_HttpFoundationService.php'));
}, 'form.type_extension.form.request_handler' => function () {
    return ($this->privates['form.type_extension.form.request_handler'] ?? $this->load('getForm_TypeExtension_Form_RequestHandlerService.php'));
}, 'form.server_params' => function () {
    return ($this->privates['form.server_params'] ?? $this->load('getForm_ServerParamsService.php'));
}, 'form.type_extension.form.validator' => function () {
    return ($this->privates['form.type_extension.form.validator'] ?? $this->load('getForm_TypeExtension_Form_ValidatorService.php'));
}, 'form.type_extension.repeated.validator' => function () {
    return ($this->privates['form.type_extension.repeated.validator'] ?? $this->privates['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension());
}, 'form.type_extension.submit.validator' => function () {
    return ($this->privates['form.type_extension.submit.validator'] ?? $this->privates['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension());
}, 'form.type_extension.upload.validator' => function () {
    return ($this->privates['form.type_extension.upload.validator'] ?? $this->load('getForm_TypeExtension_Upload_ValidatorService.php'));
}, 'validator.builder' => function () {
    return ($this->privates['validator.builder'] ?? $this->load('getValidator_BuilderService.php'));
}, 'validator.mapping.cache_warmer' => function () {
    return ($this->privates['validator.mapping.cache_warmer'] ?? $this->load('getValidator_Mapping_CacheWarmerService.php'));
}, 'validator.validator_factory' => function () {
    return ($this->privates['validator.validator_factory'] ?? $this->load('getValidator_ValidatorFactoryService.php'));
}, 'validator.expression' => function () {
    return ($this->privates['validator.expression'] ?? $this->privates['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator());
}, 'validator.email' => function () {
    return ($this->privates['validator.email'] ?? $this->privates['validator.email'] = new \Symfony\Component\Validator\Constraints\EmailValidator('loose'));
}, 'cache.property_access' => function () {
    return ($this->privates['cache.property_access'] ?? $this->privates['cache.property_access'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter(0, false));
}, 'debug.debug_handlers_listener' => function () {
    return ($this->privates['debug.debug_handlers_listener'] ?? $this->getDebug_DebugHandlersListenerService());
}, 'debug.file_link_formatter' => function () {
    return ($this->privates['debug.file_link_formatter'] ?? $this->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL));
}, 'debug.stopwatch' => function () {
    return ($this->privates['debug.stopwatch'] ?? $this->privates['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true));
}, 'debug.event_dispatcher' => function () {
    return ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());
}, 'debug.controller_resolver' => function () {
    return ($this->privates['debug.controller_resolver'] ?? $this->getDebug_ControllerResolverService());
}, 'debug.argument_resolver' => function () {
    return ($this->privates['debug.argument_resolver'] ?? $this->getDebug_ArgumentResolverService());
}, 'annotations.reader' => function () {
    return ($this->privates['annotations.reader'] ?? $this->load('getAnnotations_ReaderService.php'));
}, 'annotations.dummy_registry' => function () {
    return ($this->privates['annotations.dummy_registry'] ?? $this->load('getAnnotations_DummyRegistryService.php'));
}, 'annotations.cache_warmer' => function () {
    return ($this->privates['annotations.cache_warmer'] ?? $this->load('getAnnotations_CacheWarmerService.php'));
}, 'property_accessor' => function () {
    return ($this->privates['property_accessor'] ?? $this->load('getPropertyAccessorService.php'));
}, 'Delatlantik\\RichFormSymfonyBundle\\Form\\InputTypeExtension' => function () {
    return ($this->privates['Delatlantik\RichFormSymfonyBundle\Form\InputTypeExtension'] ?? $this->privates['Delatlantik\RichFormSymfonyBundle\Form\InputTypeExtension'] = new \Delatlantik\RichFormSymfonyBundle\Form\InputTypeExtension());
}, 'debug.argument_resolver.request_attribute' => function () {
    return ($this->privates['debug.argument_resolver.request_attribute'] ?? $this->load('getDebug_ArgumentResolver_RequestAttributeService.php'));
}, 'debug.argument_resolver.request' => function () {
    return ($this->privates['debug.argument_resolver.request'] ?? $this->load('getDebug_ArgumentResolver_RequestService.php'));
}, 'debug.argument_resolver.session' => function () {
    return ($this->privates['debug.argument_resolver.session'] ?? $this->load('getDebug_ArgumentResolver_SessionService.php'));
}, 'debug.argument_resolver.service' => function () {
    return ($this->privates['debug.argument_resolver.service'] ?? $this->load('getDebug_ArgumentResolver_ServiceService.php'));
}, 'debug.argument_resolver.default' => function () {
    return ($this->privates['debug.argument_resolver.default'] ?? $this->load('getDebug_ArgumentResolver_DefaultService.php'));
}, 'debug.argument_resolver.variadic' => function () {
    return ($this->privates['debug.argument_resolver.variadic'] ?? $this->load('getDebug_ArgumentResolver_VariadicService.php'));
}, 'logger' => function () {
    return ($this->privates['logger'] ?? $this->privates['logger'] = new \Symfony\Component\HttpKernel\Log\Logger());
}, 'debug.event_dispatcher.inner' => function () {
    return ($this->privates['debug.event_dispatcher.inner'] ?? $this->privates['debug.event_dispatcher.inner'] = new \Symfony\Component\EventDispatcher\EventDispatcher());
}, 'debug.controller_resolver.inner' => function () {
    return ($this->privates['debug.controller_resolver.inner'] ?? $this->getDebug_ControllerResolver_InnerService());
}, 'debug.argument_resolver.inner' => function () {
    return ($this->privates['debug.argument_resolver.inner'] ?? $this->getDebug_ArgumentResolver_InnerService());
}, 'debug.argument_resolver.request_attribute.inner' => function () {
    return ($this->privates['debug.argument_resolver.request_attribute.inner'] ?? $this->privates['debug.argument_resolver.request_attribute.inner'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver());
}, 'debug.argument_resolver.request.inner' => function () {
    return ($this->privates['debug.argument_resolver.request.inner'] ?? $this->privates['debug.argument_resolver.request.inner'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver());
}, 'debug.argument_resolver.session.inner' => function () {
    return ($this->privates['debug.argument_resolver.session.inner'] ?? $this->privates['debug.argument_resolver.session.inner'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver());
}, 'debug.argument_resolver.service.inner' => function () {
    return ($this->privates['debug.argument_resolver.service.inner'] ?? $this->load('getDebug_ArgumentResolver_Service_InnerService.php'));
}, 'debug.argument_resolver.default.inner' => function () {
    return ($this->privates['debug.argument_resolver.default.inner'] ?? $this->privates['debug.argument_resolver.default.inner'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver());
}, 'debug.argument_resolver.variadic.inner' => function () {
    return ($this->privates['debug.argument_resolver.variadic.inner'] ?? $this->privates['debug.argument_resolver.variadic.inner'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver());
}, 'Psr\\Container\\ContainerInterface' => function () {
    return $this;
}, 'Symfony\\Component\\DependencyInjection\\ContainerInterface' => function () {
    return $this;
}, 'Symfony\\Component\\EventDispatcher\\EventDispatcherInterface' => function () {
    return ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());
}, 'Symfony\\Component\\HttpKernel\\HttpKernelInterface' => function () {
    return ($this->services['http_kernel'] ?? $this->getHttpKernelService());
}, 'Symfony\\Component\\HttpFoundation\\RequestStack' => function () {
    return ($this->services['request_stack'] ?? $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack());
}, 'Symfony\\Component\\HttpKernel\\KernelInterface' => function () {
    return ($this->services['kernel'] ?? $this->get('kernel'));
}, 'Symfony\\Component\\Filesystem\\Filesystem' => function () {
    return ($this->services['filesystem'] ?? $this->services['filesystem'] = new \Symfony\Component\Filesystem\Filesystem());
}, 'Psr\\Cache\\CacheItemPoolInterface' => function () {
    return ($this->services['cache.app'] ?? $this->load('getCache_AppService.php'));
}, 'Symfony\\Component\\Cache\\Adapter\\AdapterInterface' => function () {
    return ($this->services['cache.app'] ?? $this->load('getCache_AppService.php'));
}, 'Symfony\\Component\\Translation\\TranslatorInterface' => function () {
    return ($this->services['translator'] ?? $this->load('getTranslatorService.php'));
}, 'Symfony\\Component\\Form\\ResolvedFormTypeFactoryInterface' => function () {
    return ($this->privates['form.resolved_type_factory'] ?? $this->privates['form.resolved_type_factory'] = new \Symfony\Component\Form\ResolvedFormTypeFactory());
}, 'Symfony\\Component\\Form\\FormRegistryInterface' => function () {
    return ($this->privates['form.registry'] ?? $this->load('getForm_RegistryService.php'));
}, 'Symfony\\Component\\Form\\FormFactoryInterface' => function () {
    return ($this->services['form.factory'] ?? $this->load('getForm_FactoryService.php'));
}, 'form.property_accessor' => function () {
    return ($this->privates['property_accessor'] ?? $this->load('getPropertyAccessorService.php'));
}, 'form.choice_list_factory' => function () {
    return ($this->privates['form.choice_list_factory.cached'] ?? $this->load('getForm_ChoiceListFactory_CachedService.php'));
}, 'Symfony\\Component\\Validator\\Validator\\ValidatorInterface' => function () {
    return ($this->services['validator'] ?? $this->load('getValidatorService.php'));
}, 'validator.mapping.class_metadata_factory' => function () {
    return ($this->services['validator'] ?? $this->load('getValidatorService.php'));
}, 'Symfony\\Component\\HttpKernel\\Debug\\FileLinkFormatter' => function () {
    return ($this->privates['debug.file_link_formatter'] ?? $this->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL));
}, 'Symfony\\Component\\Stopwatch\\Stopwatch' => function () {
    return ($this->privates['debug.stopwatch'] ?? $this->privates['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true));
}, 'Symfony\\Component\\PropertyAccess\\PropertyAccessorInterface' => function () {
    return ($this->privates['property_accessor'] ?? $this->load('getPropertyAccessorService.php'));
}, 'argument_resolver.controller_locator' => function () {
    return ($this->privates['.service_locator.9_yeNH1'] ?? $this->privates['.service_locator.9_yeNH1'] = new \Symfony\Component\DependencyInjection\ServiceLocator(array()));
}, 'Psr\\Log\\LoggerInterface' => function () {
    return ($this->privates['logger'] ?? $this->privates['logger'] = new \Symfony\Component\HttpKernel\Log\Logger());
}, 'controller_resolver' => function () {
    return ($this->privates['debug.controller_resolver'] ?? $this->getDebug_ControllerResolverService());
}, 'argument_resolver' => function () {
    return ($this->privates['debug.argument_resolver'] ?? $this->getDebug_ArgumentResolverService());
}, 'argument_resolver.request_attribute' => function () {
    return ($this->privates['debug.argument_resolver.request_attribute'] ?? $this->load('getDebug_ArgumentResolver_RequestAttributeService.php'));
}, 'argument_resolver.request' => function () {
    return ($this->privates['debug.argument_resolver.request'] ?? $this->load('getDebug_ArgumentResolver_RequestService.php'));
}, 'argument_resolver.session' => function () {
    return ($this->privates['debug.argument_resolver.session'] ?? $this->load('getDebug_ArgumentResolver_SessionService.php'));
}, 'argument_resolver.service' => function () {
    return ($this->privates['debug.argument_resolver.service'] ?? $this->load('getDebug_ArgumentResolver_ServiceService.php'));
}, 'argument_resolver.default' => function () {
    return ($this->privates['debug.argument_resolver.default'] ?? $this->load('getDebug_ArgumentResolver_DefaultService.php'));
}, 'argument_resolver.variadic' => function () {
    return ($this->privates['debug.argument_resolver.variadic'] ?? $this->load('getDebug_ArgumentResolver_VariadicService.php'));
}));
